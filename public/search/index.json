[{"content":"","id":"9aa5c97682f72103a3e5ce2268a46fd5","title":"Custom Webcomponents 101"},{"content":"GitHub Actions You can integrate GitHub Actions into your repository by adding a .github\\workflows folder in the root of your repository. In this folder, you can store all your GitHub Workflows.\nYour GitHub Workflows can be triggered by a variety triggers. For example, if you want to trigger a GitHub workflow upon a commit, you can specify it like this:\n1 2 on: push: After specifying the trigger, you can add Actions to it. GitHub has a Marketplace where you can find lots of actions, or you can write your own action, in for example, nodejs. You can add secrets for your GitHub Actions under Repository \u0026gt; Settings \u0026gt; Secrets and variables \u0026gt; Actions.\nSpecial Repositories .GitHub GitHub has a lot of special repositories. One of these special repositories is the .github repository. The .github repository serves as a fallback if one of your other repositories does not contain a .github folder. For example, you can add an issue template in the .github repository that will be applied to all your repositories.\nOrganization level If you have a .github repository in an organization, it can also serve as a profile page. The README.md inside this repository will be served on your organization.\nProfile You can add a username/username GitHub repository where you can add a README.md file that will serve as your profile page.\nGitHub.io You can use GitHub Pages to host static files. For example, if you have documentation that you want to give to your endusers, you can use gitHub.io. This site is built with Hugo and published with a GitHub Action to GitHub.io.\nGitHub Apps Next to GitHub Actions, you can make use of GitHub Apps. You can find a list of GitHub Apps in the Marketplace. GitHub Apps can automatically deny pull requests or add extra checks for your code. For example, you can use dependabot as a GitHub app to automatically create new pull requests whenever your dependencies have new versions.\nCI/CD In Action Let\u0026rsquo;s say you have a Feature Branch Workflow like this:\ngitGraph commit id: \"new Feature\" branch \"Feature Branch\" commit commit checkout \"main\" merge \"Feature Branch\" commit Commiting directly on main has been disabled (Branch Protection Rule).\nWhen merging the Feature Branch back to Main, it\u0026rsquo;s possible to automatically create a new Release and publish it to, for example, npmjs.org\nThe GitHub Workflow above will be triggered when something has been pushed to main. It uses Conventional Commits to generate a CHANGELOG.md and checks what the new version number should be.\ngit commit -m \u0026quot;Chore: Added new Feature [X]\u0026quot;\nPrefix Version upgrade Feat: Minor Feat!: Major Fix: Patch [BREAKING CHANGE]: Major Other prefixes like docs:, chore:, build:, ci:, test: and refactor: may be used.\nSee the Conventional Commits site for more info.\nAfter the Feature branch has been merged back to main, The GitHub workflow will be triggered and it will create a new Pull Request with a generated CHANGELOG.md and an updated version number.\ngitGraph commit id: \"new Feature\" branch \"Feature Branch\" commit commit checkout \"main\" merge \"Feature Branch\" branch \"Release Branch\" commit id: \"Updated Changelog\" checkout \"main\" merge \"Release Branch\" type: REVERSE tag: \"Release\" commit ","id":"70d9188aa88ce514e65cd59de2e977d7","title":"Making the most out of GitHub"},{"content":"Intro Whenever I start a new project, I often use a specific workflow to make the most out of my development speed. Whether it\u0026rsquo;s a frontend project, or a backend project, I use a similar template for each project.\nTooling I normally use GitHub as my go-to SCM. Depending on the type of project, I start out with adding specific GitHub Actions. If it\u0026rsquo;s a project that i want to deploy (on NPM), I use the release-please GitHub Action..\nDependabot I use Dependabot to create auto pull requests whenever a dependency has a version update.\nSonarCloud For code quality, I make use of SonarCloud.\nMy sonar-project.properties in the root of my project looks like this:\n1 2 3 4 sonar.projectKey=[PROJECT_KEY] sonar.organization=[ORGANIZATION] sonar.javascript.lcov.reportPAths=./coverage/lcov.info sonar.coverage.exclusions=/tests/** I normally set up SonarCloud to be CI-driven, because i want to display the Code Coverage.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 name: Build on: push: branches: - master pull_request: types: [opened, synchronize, reopened] jobs: sonarcloud: name: SonarCloud runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 with: fetch-depth: 0 - name: Install dependencies run: npm ci - name: Test and coverage run: npm jest --coverage - name: SonarCloud Scan uses: SonarSource/sonarcloud-github-action@master env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} SONAR_TOKEN: ${{ secrets. SONARCLOUD_TOKEN }} Allstar Once this is setup, I add a Branch Protection Rule on main which blocks direct commits. I\u0026rsquo;m using Allstar as a GitHub app that forces me to add specific protection settings. You can see my Allstar configuration here.\n","id":"201ac2ca0d96b42046d5bfcf9b3a2149","title":"My Project Setup"}]